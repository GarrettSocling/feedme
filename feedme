#!/usr/bin/env python

# feedme: read RSS/Atom feeds and convert to Plucker files.
# Copyright 2009 Akkana Peck <akkana@shallowsky.com>
# Based on feedread, Copyright (C) 2009 Benjamin M. A'Lee <bma@subvert.org.uk>
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details:
# <http://www.gnu.org/licenses/>.

#
# Important TODO:
# - Skip to next article links
# - handle failures to download article
#

import cPickle
import time, datetime
import os, sys
import re
import unicodedata   # for normalizing to ASCII
import types

from ConfigParser import ConfigParser

import feedparser

has_ununicode=True
try :
    import ununicode
except ImportError, e:
    has_ununicode=False
    
VersionString = "FeedMe 0.2"

def rssread(url, name, outdir, levels=2,
            page_start='', page_end='',
            single_page_pat='', skip_pats=[], ascii=False,
            verbose=False, ignore_cache=False):
    """Read a feed from a URL and write the contents to a mail folder.
        arguments:
        url        -- RSS url to read
        outdir     -- directory on disk to write the result for this site
        levels     -- depth (1 or 2 only)
        page_start -- pattern to start with -- everything earlier is discarded
        page_end   -- pattern to end with -- everything later is discarded
        skip_pats  -- patterns (regexps) to omit if encountered in the page
        verbose    -- print debug output?
    """

    downloaded_string ="\n<hr><i>(Downloaded by " + VersionString + ")</i>\n"

    feed = feedparser.parse(url)

    # feedparser has no error return! One way is to check len(feed.feed).
    if len(feed.feed) == 0 :
        print >>sys.stderr, "Can't read", url
        return

    if not ignore_cache :
        if url not in cache:
            cache[url] = []
        feedcache = cache[url]

    if not os.access(outdir, os.W_OK) :
        os.makedirs(outdir)

    # suburls: mapping of URLs we've encountered to local URLs.
    # Any anchors (#anchor) will be discarded.
    # This is for sites like WorldWideWords that make many links
    # to the same page.
    suburls = []

    # indexstr is the contents of the index.html file.
    # Kept as a string until we know whether there are new, non-cached
    # stories so it's worth updating the copy on disk.
    indexstr = u"<html>\n<head>\n"
    indexstr += "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n";
    indexstr += "<title>" + feed.feed.title + "</title>\n</head>\n"
    indexstr += "\n<body>\n<h1>" + feed.feed.title + "</h1>\n\n"

    if verbose:
        print >>sys.stderr, "********* Reading", url

    itemnum = 0
    for item in feed.entries:

        if 'links' in item:
            href = [i['href'].encode('utf-8') for i in item.links if i['rel'] == 'alternate']
        else:
            href = []

        if not 'id' in item:
            if len(href) > 0 :
                item.id = href[0]
            else:
                if verbose :
                    print >>sys.stderr, "Item in", url, "had no unique ID."
                next  # or return?

        # Make sure ids don't have named anchors appended:
        anchor_index = item.id.rfind('#')
        if anchor_index >= 0 :
            anchor = item.id[anchor_index:]
            item.id = item.id[0:anchor_index]
        else :
            anchor = ""

        # See if we've already seen this page:
        try :
            pagenum = suburls.index(item.id)
            # We've already seen a link to this URL. It's probably
            # a link to a different named anchor within the same file.
        except ValueError :
            # Haven't seen it before. Add it to the cache and suburls.
            if not ignore_cache and item.id in feedcache:
                continue
            suburls.append(item.id)
            pagenum = len(suburls) - 1

        itemnum += 1
        if verbose :
            print >>sys.stderr, "\nItem:", item.title.encode('utf-8')

        # Now itemnum is the number of the entry on the index page;
        # pagenum is the html file of the subentry, e.g. 3.html.

        #
        # Follow the link and make a file for it:
        #
        if levels > 1 or not 'content' in item :
            try :
                subitem = feedparser.parse(item.link)
                if len(subitem.feed) == 0 :
                    #raise Exception()
                    continue

                # Don't ask. I figured out the next line empirically
                # poking around with the python interpreter.
                # Couldn't figure it out from the documentation.
                html = subitem.items()[0][1].items()[0][1]

                # See if the single page pattern exists and works
                if single_page_pat != '' :
                    m = re.search(single_page_pat, html)
                    if m :
                        sp_item = feedparser.parse(html[m.start():m.end()])
                        if len(sp_item.feed) > 0 :
                            if verbose :
                                print >>sys.stderr, "Found a single-page link!"
                            html = sp_item.items()[0][1].items()[0][1]
                        else :
                            if verbose :
                                print >>sys.stderr, "Can't read single-page", \
                                    html[m.start():m.end()]
                    else :
                        if verbose :
                            print >>sys.stderr, "No single-page link in", \
                                item.link

                # Throw out everything before the page_start pattern
                # and after the page_end pattern
                if page_start and page_start != "" :
                    #pat = re.compile(page_start)
                    #match = pat.search(html)
                    #if not match :
                    #    print >>sys.stderr, "Couldn't find", page_start
                    #else :
                    #    html = html[match.start() : ]
                    match = html.find(page_start)
                    if match >= 0:
                        html = html[match:]

                if page_end and page_end != "" :
                    match = html.find(page_end)
                    if match >= 0:
                        html = html[0 : match]

                # Skip anything matching the skip_pats
                for skip in skip_pats :
                    if verbose :
                        print >>sys.stderr, "Trying to skip", skip
                    html = re.sub(skip, '', html)

            except KeyboardInterrupt:
                print >>sys.stderr, "Caught keyboard interrupt, exiting."
                sys.exit(1)
            except :
                if verbose :
                    print >>sys.stderr, "Couldn't parse subentry", item.link
                html = item.summary
                raise   # XXX remove, but should at least print the error

        if not 'published_parsed' in item:
            if 'updated_parsed' in item:
                item.published_parsed = item.updated_parsed
            else:
                item.published_parsed = time.gmtime()

        def output_encode(str) :
            if ascii and has_ununicode :
                #return unicodedata.normalize('NFKD', str).encode('ascii', 'ignore')
                # valid values in encode are replace and ignore
                return ununicode.toascii(str,
                                         errfilename=os.path.join(outdir,
                                                                  "errors"))
            else :
                return str.encode('utf=8')

        def save_html_file(outdir, title, html) :
            # title and html are is unicode strings, not yet encoded.
            # But html has already been converted and is ready to write.

            utftitle = output_encode(title)
            fnam = str(pagenum) + ".html"

            of = open(os.path.join(outdir, fnam), "w")
            of.write("<html>\n<head>\n")
            of.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n")
            of.write("<title>" + utftitle + "</title>\n</head>\n")
            of.write("\n<body>\n<h1>" + utftitle + "</h1>\n\n")
            of.write(output_encode(html))

            # add a "next item" link
            if itemnum < len(feed.entries) :
                of.write("<br><a href=\"" + str(pagenum+1) +
                         ".html\">&gt;&gt;</a>\n")

            of.write(downloaded_string)
                
            of.write("</body>\n</html>\n")
            of.close()

            return fnam

        # Plucker named anchors don't work unless preceded by a <p>
      # http://www.mail-archive.com/plucker-list@rubberchicken.org/msg07314.html
        # and the previous message.
        indexstr += "<p><a name=\"" + str(itemnum) + "\">&nbsp;</a>"

        if levels > 1 :
            fnam = save_html_file(outdir, item.title, html)
            if verbose :
                print >>sys.stderr, "Saved to file", fnam

            itemlink = '<a href=\"' + fnam + anchor + '\">'
            indexstr += '<p>\n<b>' + itemlink + item.title + '</a></b>\n'
        else :
            # For a single-level site, don't put links over each entry.
            itemlink = '<a href=\"" + item.link + "\">'
            indexstr += "\n" + itemlink + item.title + "</a>\n"

        # Under the title, add a link to jump to the next entry
        indexstr += "<br> <i><a href=\"#" + str(itemnum+1) + \
                    "\">&gt;&gt;</a></i>\n<br>\n"

        # Add either the content or the summary:
        if levels == 1 and 'content' in item :
            content = item.content[0].value + "\n"
        else :
            content = item.summary_detail.value + "\n"

        # Remove images from index content too
        # XXX should do this only if skip_imgs is true!
        content = re.sub('<img .*?>', '', content)

        indexstr += content + "\n"

        # After the content, add another link to the title,
        # in case the user wants to click through after reading
        # the content:
        sublen = 16
        if len(item.title) > sublen :
            short_title = item.title[0:sublen] + "..."
        else :
            short_title = item.title
        indexstr += "\n<br>[[" + itemlink + short_title + "</a>]]"

        # Done with this entry. Record it in the cache.
        if not ignore_cache :
            feedcache.append(item.id)

    # Only write the index.html file if there was content that
    # wasn't already in the cache.
    if itemnum > 0 :
        indexfile = os.path.join(outdir, "index.html")
        if verbose :
            print "Writing", indexfile
            #print indexstr.encode('utf-8')
        index = open(indexfile, "w")
        index.write(output_encode(indexstr))
        index.write(downloaded_string)
        index.write("\n</body>\n</html>\n")
        index.close()

        # Run plucker. This should eventually be configurable --
        # but how, with arguments like these?
        day = time.strftime("%a")
        docname = day + ": " + name
        pluckerfile = day + "_" + name.replace(" ", "_")
        cmd = "plucker-build -N \"" + docname + "\" -f \"" + pluckerfile \
            + "\" --stayonhost --noimages --zlib-compression --maxdepth 2" \
            + " -H \"file://" + indexfile + "\""

        print "Running:", cmd
        os.system(cmd)
    else :
        print name, ": no new content"

#
# Main -- read the config file and loop over sites.
#
if __name__ == '__main__':
    #
    # Read the config file
    #
    home = os.environ['HOME']
    if 'XDG_CONFIG_HOME' in os.environ:
        conffile = os.path.join(os.environ['XDG_CONFIG_HOME'],
                                'feedme', 'feedme.conf')
    else:
        conffile = os.path.join(home, '.config', 'feedme', 'feedme.conf')
    if not os.access(conffile, os.R_OK):
        print >>sys.stderr, "Error: no config file in", conffile
        sys.exit(1)
    
    config = ConfigParser({ 'verbose':'false', 'levels':'2',
                            'page_start':'', 'page_end':'',
                            'single_page_pat':'', 'skip_pat':'',
                            'ascii':'false'})
    config.read(conffile)

    #
    # Load the cache file
    #
    if 'XDG_CACHE_HOME' in os.environ:
        cachefile = os.path.join(os.environ['XDG_CACHE_HOME'],
                                 'feedme', 'feedme.dat')
    else:
        cachefile = os.path.join(home, '.cache',
                                 'feedme', 'feedme.dat')

    if not os.access(cachefile, os.W_OK) and os.path.exists(cachefile) :
        print >>sys.stderr, "Error: can't write cache file", cachefile
        sys.exit(1)
    else:
        dirname = os.path.dirname(cachefile)
        if not os.path.exists(dirname):
            os.makedirs(dirname)
        cache = {}
    cache = cPickle.load(open(cachefile))

    #
    # Loop over the list of sites
    #
    for feedname in config.sections():
        # Mandatory arguments:
        try :
            url = config.get(feedname, 'url')
            dir = config.get(feedname, 'dir')
            # config.get alas doesn't substitute $HOME or ~
            if dir[0:2] == "~/" :
                dir = os.path.join(home, dir[2:])
            elif dir[0:6] == "$HOME/" :
                dir = os.path.join(home, dir[6:])
        except KeyboardInterrupt:
            print >>sys.stderr, "Caught keyboard interrupt, exiting."
            sys.exit(0)
        except :
            print "Must specify dir and name for:", feedname
            sys.exit(1)

        skip_pats = config.get(feedname, 'skip_pat')
        if skip_pats != '' :
            skip_pats = skip_pats.split('\n')
        else :
            skip_pats = []

        # Skip images -- should make this optional
        if config.get(feedname, 'skip_images') == 'true':
            skip_pats.append('<img .*?>')

        try:
            feedfile = feedname.replace(" ", "_")
            outpath = os.path.join(dir,  feedfile)
            do_ascii = (config.get(feedname, 'ascii') != 'false')
            if do_ascii and not has_ununicode :
                do_ascii = False
                print feedname, ':', "Can't convert to ascii without ununicode"

            rssread(url, feedname, outpath,
                    levels=int(config.get(feedname, 'levels')),
                    page_start=config.get(feedname, 'page_start'),
                    page_end=config.get(feedname, 'page_end'),
                    single_page_pat=config.get(feedname, 'single_page_pat'),
                    skip_pats=skip_pats,
                    ascii=((config.get(feedname, 'ascii') != 'false')
                           and has_ununicode),
                    verbose=(config.get(feedname, 'verbose') != 'false'),
                    ignore_cache=False)
            cPickle.dump(cache,open(cachefile,'w'))
        except KeyboardInterrupt:
            print >>sys.stderr, "Caught keyboard interrupt, exiting."
            sys.exit(0)
        except Exception, e:
            print >>sys.stderr, "Failure on", feedname, sys.exc_type, e
            raise
